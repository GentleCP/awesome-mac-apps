-- Copyright 2014 Running with Crayons. All rights reserved.

-- tell itunes to play or pause
on play_pause()
	tell application "iTunes"
		playpause
	end tell
end play_pause


-- tell itunes to play next track
on next_track()
	tell application "iTunes"
		next track
	end tell
end next_track


-- tell itunes to back track
on back_track()
	tell application "iTunes"
		back track
	end tell
end back_track


-- tell itunes to play previous track
on previous_track()
	tell application "iTunes"
		previous track
	end tell
end back_track


-- unmute the volume
on unmute()
	tell application "iTunes"
		set mute to false
	end tell
end unmute


-- toggle mute the volume
on toggle_mute()
	tell application "iTunes"
		set mute to (not mute)
	end tell
end toggle_mute


-- set the volume
on set_volume(percentage)
	tell application "iTunes"
		set sound volume to percentage
	end tell
end set_volume


-- get the volume
on current_volume()
	tell application "iTunes"
		return sound volume
	end tell
end current_volume


-- rating of current track
on set_rating_of_track(pid, trating)
	tell application "iTunes"
		set matchtracks to every track whose persistent ID is pid
		set chosenTrack to item 1 of matchtracks
		set rating of chosenTrack to trating
	end tell
end set_rating_of_track


-- get current track
on get_track()
	tell application "iTunes"
		
		-- obtain source of current track
		try
			set src to container of container of current track
		on error
			set src to null
		end try
		
		-- player state
		if player state is playing then
			set pstate to true
		else
			set pstate to false
		end if
		
		set ctpath to null
		
		-- if current source if iTunes Radio
		if (src is not null and kind of src is radio tuner) then
			
			-- setup our return array
			set tinfo to {persistent ID of current track, name of current track, album of current track, artist of current track, ctpath, pstate, rating of current track, track number of current track, track count of current track, compilation of current track}
			
			-- other source
		else
			
			-- current track
			try
				set ct to current track
			on error
				return null
			end try
			
			-- path of current track
			set ctclass to class of file track
			if (class of ct is equal to file track) then
				set ctpath to POSIX path of (location of ct as Unicode text)
			end if
			
			-- setup our return array
			set tinfo to {persistent ID of ct, name of ct, album of ct, artist of ct, ctpath, pstate, rating of ct, track number of ct, track count of ct, compilation of ct}
			
		end if
		
		return tinfo
	end tell
end get_track


-- play track by pid
on play_track(pid)
	tell application "iTunes"
		set matchtracks to every track whose persistent ID is pid
		set chosenTrack to item 1 of matchtracks
		set trackid to id of chosenTrack
		play track id trackid
	end tell
end play_track


-- reset the playlist to the Alfred one
on reset_playlist(playlistname)
	tell application "iTunes"
		-- clear out playlist
		if (exists playlist playlistname) then
			delete user playlist playlistname
		end if
		make new user playlist with properties {name:playlistname}
	end tell
end reset_playlist


-- add a track to the playlist
on set_tracks(pids, playlistname)
	tell application "iTunes"
		set currentList to playlist playlistname
		repeat with pid in pids
			set matchtracks to (every track whose persistent ID is pid)
			set chosenTrack to item 1 of matchtracks
			duplicate (chosenTrack) to currentList
		end repeat
	end tell
end set_tracks


-- play track index of playlist
on play_playlist_with_name(playlistname)
	tell application "iTunes"
		set shuffle enabled to false
		set currentList to playlist playlistname
		play currentList
	end tell
end play_playlist_with_name


-- get songs in a playlist
on play_playlist(pid)
	tell application "iTunes"
		set plist to some playlist whose persistent ID is pid
		play plist
	end tell
end play_playlist
